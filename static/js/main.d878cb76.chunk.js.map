{"version":3,"sources":["components/PerceptronNetworkAnimation.jsx","App.js","reportWebVitals.js","index.js"],"names":["PerceptronNetworkAnimation","trainingData","inputs","output","weights","setWeights","useState","bias","setBias","isRunning","setIsRunning","epoch","setEpoch","learningRate","setLearningRate","currentSample","setCurrentSample","prediction","setPrediction","weightedSum","setWeightedSum","logs","setLogs","totalError","setTotalError","isComplete","setIsComplete","isConverged","setIsConverged","phase","setPhase","currentPredictions","setCurrentPredictions","Array","length","fill","predict","w","b","trainStep","sample","sum","pred","prevPredictions","newPredictions","error","prevLogs","slice","newWeights","newBias","map","toFixed","nextSample","newTotalError","calculateTotalError","i","Math","abs","calculateSum","useEffect","allPredictions","interval","setInterval","clearInterval","React","createElement","className","renderPerceptron","x1","x2","w1","w2","w0","width","height","viewBox","id","markerWidth","markerHeight","refX","refY","orient","points","cx","cy","r","stroke","strokeWidth","x","y","fontSize","textAnchor","overflow","y1","y2","fontWeight","markerEnd","rx","join","idx","key","log","onClick","disabled","resetTraining","type","min","max","step","value","onChange","e","parseFloat","target","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d878cb76.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst PerceptronNetworkAnimation = () => {\r\n  // Datos de entrenamiento para compuerta AND (orden invertido)\r\n  const trainingData = [\r\n    { inputs: [1, 1], output: 1 },\r\n    { inputs: [1, 0], output: 0 },\r\n    { inputs: [0, 1], output: 0 },\r\n    { inputs: [0, 0], output: 0 }\r\n  ];\r\n  \r\n  // Estados para los pesos, bias, el estado de la animación y los logs\r\n  const [weights, setWeights] = useState([1, 1]);\r\n  const [bias, setBias] = useState(-3);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [epoch, setEpoch] = useState(0);\r\n  const [learningRate, setLearningRate] = useState(1);\r\n  const [currentSample, setCurrentSample] = useState(0);\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [weightedSum, setWeightedSum] = useState(0);\r\n  const [logs, setLogs] = useState([]);\r\n  const [totalError, setTotalError] = useState(1);\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [isConverged, setIsConverged] = useState(false);\r\n  const [phase, setPhase] = useState('feedforward');\r\n  const [currentPredictions, setCurrentPredictions] = useState(new Array(trainingData.length).fill(null));\r\n  \r\n  // Función para predecir la salida del perceptrón\r\n  const predict = (inputs, w, b) => {\r\n    const sum = inputs[0] * w[0] + inputs[1] * w[1] + b;\r\n    return sum >= 0 ? 1 : 0;\r\n  };\r\n  \r\n  // Calcular la suma ponderada\r\n  const calculateSum = (inputs, w, b) => {\r\n    return inputs[0] * w[0] + inputs[1] * w[1] + b;\r\n  };\r\n  \r\n  // Calcular el error total\r\n  const calculateTotalError = (w, b) => {\r\n    let totalError = 0;\r\n    for (let i = 0; i < trainingData.length; i++) {\r\n      const sample = trainingData[i];\r\n      const pred = predict(sample.inputs, w, b);\r\n      totalError += Math.abs(sample.output - pred);\r\n    }\r\n    return totalError;\r\n  };\r\n\r\n  // Función para entrenar al perceptrón\r\n  const trainStep = () => {\r\n    // Si ya se completó todo el proceso de entrenamiento incluyendo la época extra, detener\r\n    if (isComplete) {\r\n      setIsRunning(false);\r\n      return;\r\n    }\r\n\r\n    // Obtener muestra actual\r\n    const sample = trainingData[currentSample];\r\n    \r\n    if (phase === 'feedforward') {\r\n      // Fase de propagación hacia adelante\r\n      const sum = calculateSum(sample.inputs, weights, bias);\r\n      setWeightedSum(sum);\r\n      \r\n      // Calcular predicción\r\n      const pred = sum >= 0 ? 1 : 0;\r\n      setPrediction(pred);\r\n      \r\n      // Registrar la predicción (solo en feedforward)\r\n      setCurrentPredictions(prevPredictions => {\r\n        const newPredictions = [...prevPredictions];\r\n        newPredictions[currentSample] = pred;\r\n        return newPredictions;\r\n      });\r\n      \r\n      // Cambiar a fase de propagación hacia atrás\r\n      setPhase('backprop');\r\n    } else {\r\n      // Fase de propagación hacia atrás\r\n      const sum = weightedSum;\r\n      const pred = prediction;\r\n      \r\n      // Calcular error\r\n      const error = sample.output - pred;\r\n      \r\n      // Si ya convergió, no actualizamos pesos, solo mostramos\r\n      if (!isConverged) {\r\n        // Actualizar pesos y bias si hay error\r\n        if (error !== 0) {\r\n          const newWeights = [\r\n            weights[0] + learningRate * error * sample.inputs[0],\r\n            weights[1] + learningRate * error * sample.inputs[1]\r\n          ];\r\n          const newBias = bias + learningRate * error;\r\n          \r\n          setWeights(newWeights);\r\n          setBias(newBias);\r\n          \r\n          // Registrar la actualización\r\n          setLogs(prevLogs => [\r\n            ...prevLogs,\r\n            `Época ${epoch}, Muestra [${sample.inputs}] → ${sample.output}, Predicción: ${pred}, Error: ${error}, Pesos: [${newWeights.map(w => w.toFixed(2))}], Bias: ${newBias.toFixed(2)}`\r\n          ].slice(-10));\r\n        } else {\r\n          // Registrar sin actualización\r\n          setLogs(prevLogs => [\r\n            ...prevLogs,\r\n            `Época ${epoch}, Muestra [${sample.inputs}] → ${sample.output}, Predicción: ${pred}, Error: ${error}, Pesos: [${weights.map(w => w.toFixed(2))}], Bias: ${bias.toFixed(2)}`\r\n          ].slice(-10));\r\n        }\r\n      } else {\r\n        // Si ya convergió, solo registramos observación sin actualizar pesos\r\n        setLogs(prevLogs => [\r\n          ...prevLogs,\r\n          `Época extra ${epoch}, Muestra [${sample.inputs}] → ${sample.output}, Predicción: ${pred}, Error: ${error} (Pesos ya finales)`\r\n        ].slice(-10));\r\n      }\r\n      \r\n      // Avanzar a la siguiente muestra\r\n      let nextSample = (currentSample + 1) % trainingData.length;\r\n      setCurrentSample(nextSample);\r\n      \r\n      // Si completamos una época, actualizar contador y verificar si hemos convergido\r\n      if (nextSample === 0) {\r\n        setEpoch(epoch + 1);\r\n        const newTotalError = calculateTotalError(weights, bias);\r\n        setTotalError(newTotalError);\r\n        \r\n        // Si no había convergido antes y ahora el error es 0, marcar como convergido\r\n        if (!isConverged && newTotalError === 0) {\r\n          setIsConverged(true);\r\n          setLogs(prevLogs => [\r\n            ...prevLogs,\r\n            `¡Convergencia lograda! Ejecutando una época adicional de demostración...`\r\n          ]);\r\n        }\r\n        \r\n        // Si ya convergió y completamos una época extra, entonces hemos terminado\r\n        if (isConverged) {\r\n          setIsComplete(true);\r\n          setLogs(prevLogs => [\r\n            ...prevLogs,\r\n            `Entrenamiento completado. El perceptrón ha aprendido la función AND.`\r\n          ]);\r\n        }\r\n      }\r\n      \r\n      // Volver a fase de propagación hacia adelante\r\n      setPhase('feedforward');\r\n      \r\n      // Reiniciar la predicción para la nueva muestra\r\n      setPrediction(null);\r\n      setWeightedSum(0);\r\n    }\r\n  };\r\n  \r\n  // Efecto para actualizar todas las predicciones cuando se completa el entrenamiento\r\n  useEffect(() => {\r\n    if (isComplete) {\r\n      const allPredictions = trainingData.map(sample => \r\n        predict(sample.inputs, weights, bias)\r\n      );\r\n      setCurrentPredictions(allPredictions);\r\n    }\r\n  }, [isComplete, weights, bias, trainingData]);\r\n  \r\n  // Efecto para la animación automática\r\n  useEffect(() => {\r\n    let interval;\r\n    if (isRunning) {\r\n      interval = setInterval(trainStep, 1000);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isRunning, currentSample, weights, bias, epoch, learningRate, phase]);\r\n  \r\n  // Reiniciar el entrenamiento\r\n  const resetTraining = () => {\r\n    setWeights([1, 1]);\r\n    setBias(-3);\r\n    setEpoch(0);\r\n    setCurrentSample(0);\r\n    setPrediction(null);\r\n    setWeightedSum(0);\r\n    setLogs([]);\r\n    setTotalError(1);\r\n    setIsComplete(false);\r\n    setIsConverged(false);\r\n    setIsRunning(false);\r\n    setPhase('feedforward');\r\n    setCurrentPredictions(new Array(trainingData.length).fill(null));\r\n  };\r\n  \r\n  // Función para renderizar el perceptrón\r\n  const renderPerceptron = () => {\r\n    const sample = trainingData[currentSample];\r\n    const x1 = sample.inputs[0];\r\n    const x2 = sample.inputs[1];\r\n    const w1 = weights[0];\r\n    const w2 = weights[1];\r\n    const w0 = bias;\r\n    \r\n    return (\r\n      <svg width=\"500\" height=\"280\" viewBox=\"0 0 500 280\">\r\n        {/* Definir flechas para las conexiones */}\r\n        <defs>\r\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n                refX=\"0\" refY=\"3.5\" orient=\"auto\">\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#000\" />\r\n          </marker>\r\n        </defs>\r\n        \r\n        {/* Entradas */}\r\n        <g className=\"inputs\">\r\n          {/* X1 */}\r\n          <circle cx=\"50\" cy=\"70\" r=\"20\" fill=\"#E3F2FD\" stroke=\"#2196F3\" strokeWidth=\"2\" />\r\n          <text x=\"50\" y=\"75\" fontSize=\"14\" textAnchor=\"middle\">x₁={x1}</text>\r\n          \r\n          {/* X2 */}\r\n          <circle cx=\"50\" cy=\"160\" r=\"20\" fill=\"#E3F2FD\" stroke=\"#2196F3\" strokeWidth=\"2\" />\r\n          <text x=\"50\" y=\"165\" fontSize=\"14\" textAnchor=\"middle\">x₂={x2}</text>\r\n          \r\n          {/* Bias */}\r\n          <circle cx=\"50\" cy=\"250\" r=\"20\" fill=\"#FCE4EC\" stroke=\"#E91E63\" strokeWidth=\"2\" />\r\n          <text x=\"50\" y=\"255\" fontSize=\"14\" textAnchor=\"middle\">1</text>\r\n        </g>\r\n        \r\n        {/* Sumador */}\r\n        <g className=\"summation\">\r\n          <circle cx=\"240\" cy=\"160\" r=\"30\" fill=\"#FFF3E0\" stroke=\"#FF9800\" strokeWidth=\"2\" />\r\n          <text x=\"240\" y=\"170\" fontSize=\"24\" textAnchor=\"middle\">Σ</text>\r\n          \r\n          {/* Valor de la suma */}\r\n          <text x=\"240\" y=\"200\" fontSize=\"12\" textAnchor=\"middle\">\r\n            Suma: {weightedSum.toFixed(2)}\r\n          </text>\r\n        </g>\r\n        \r\n        {/* Función de activación */}\r\n        <g className=\"activation\">\r\n          <circle cx=\"360\" cy=\"160\" r=\"30\" fill=\"#F1F8E9\" stroke=\"#8BC34A\" strokeWidth=\"2\" />\r\n          \r\n          {/* Función escalón mejorada */}\r\n          <svg x=\"330\" y=\"130\" width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" overflow=\"visible\">\r\n            <line x1=\"0\" y1=\"30\" x2=\"20\" y2=\"30\" stroke=\"black\" strokeWidth=\"2\" />\r\n            <line x1=\"20\" y1=\"30\" x2=\"20\" y2=\"10\" stroke=\"black\" strokeWidth=\"2\" />\r\n            <line x1=\"20\" y1=\"10\" x2=\"60\" y2=\"10\" stroke=\"black\" strokeWidth=\"2\" />\r\n            <text x=\"30\" y=\"5\" fontSize=\"10\" textAnchor=\"middle\">f(x)</text>\r\n            \r\n            {/* Añadir ejes */}\r\n            <line x1=\"0\" y1=\"50\" x2=\"60\" y2=\"50\" stroke=\"#777\" strokeWidth=\"0.5\" /> {/* Eje X */}\r\n            <line x1=\"20\" y1=\"0\" x2=\"20\" y2=\"50\" stroke=\"#777\" strokeWidth=\"0.5\" /> {/* Eje Y */}\r\n            \r\n            {/* Punto que muestra el valor actual en la función */}\r\n            <circle \r\n              cx={weightedSum < 0 ? 10 : 40} \r\n              cy={weightedSum < 0 ? 30 : 10} \r\n              r=\"3\" \r\n              fill=\"red\" \r\n            />\r\n          </svg>\r\n        </g>\r\n        \r\n        {/* Salida */}\r\n        <g className=\"output\">\r\n          <circle cx=\"450\" cy=\"160\" r=\"20\" fill=\"#FFEBEE\" stroke=\"#F44336\" strokeWidth={prediction === 1 ? \"4\" : \"2\"} />\r\n          <text x=\"450\" y=\"165\" fontSize=\"16\" textAnchor=\"middle\">{prediction === null ? '?' : prediction}</text>\r\n        </g>\r\n        \r\n        {/* Conexiones */}\r\n        <g className=\"connections\">\r\n          {/* X1 a Sumador - sin flecha */}\r\n          <line x1=\"70\" y1=\"70\" x2=\"212\" y2=\"150\" stroke={w1 >= 0 ? \"#4CAF50\" : \"#F44336\"} \r\n                strokeWidth={Math.abs(w1) * 1.5 + 1} />\r\n          <text x=\"130\" y=\"100\" fontSize=\"12\" fontWeight=\"bold\">{w1.toFixed(2)}</text>\r\n          \r\n          {/* X2 a Sumador - sin flecha */}\r\n          <line x1=\"70\" y1=\"160\" x2=\"210\" y2=\"160\" stroke={w2 >= 0 ? \"#4CAF50\" : \"#F44336\"} \r\n                strokeWidth={Math.abs(w2) * 1.5 + 1} />\r\n          <text x=\"130\" y=\"150\" fontSize=\"12\" fontWeight=\"bold\">{w2.toFixed(2)}</text>\r\n          \r\n          {/* Bias a Sumador - sin flecha */}\r\n          <line x1=\"70\" y1=\"250\" x2=\"212\" y2=\"170\" stroke={w0 >= 0 ? \"#4CAF50\" : \"#F44336\"} \r\n                strokeWidth={Math.abs(w0) * 1.5 + 1} />\r\n          <text x=\"130\" y=\"220\" fontSize=\"12\" fontWeight=\"bold\">{w0.toFixed(2)}</text>\r\n          \r\n          {/* Sumador a Función de activación */}\r\n          <line x1=\"270\" y1=\"160\" x2=\"330\" y2=\"160\" stroke=\"#000\" \r\n                strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\r\n          \r\n          {/* Función de activación a Salida */}\r\n          <line x1=\"390\" y1=\"160\" x2=\"430\" y2=\"160\" stroke=\"#000\" \r\n                strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\r\n        </g>\r\n        \r\n        {/* Target y predicción - solo mostrar después del feedforward */}\r\n        {(phase === 'backprop' || isComplete) && (\r\n          <g className=\"target\">\r\n            <rect x=\"370\" y=\"80\" width=\"120\" height=\"40\" fill=\"#F5F5F5\" stroke=\"#9E9E9E\" strokeWidth=\"1\" rx=\"5\" />\r\n            <text x=\"430\" y=\"100\" fontSize=\"12\" textAnchor=\"middle\">\r\n              Target: {sample.output}\r\n            </text>\r\n            <text x=\"430\" y=\"115\" fontSize=\"12\" textAnchor=\"middle\">\r\n              Error: {sample.output - prediction}\r\n            </text>\r\n          </g>\r\n        )}\r\n        \r\n        {/* Fase actual */}\r\n        <rect x=\"240\" y=\"30\" width=\"160\" height=\"30\" fill={phase === 'feedforward' ? \"#E3F2FD\" : \"#FFEBEE\"} stroke=\"#9E9E9E\" strokeWidth=\"1\" rx=\"5\" />\r\n        <text x=\"320\" y=\"50\" fontSize=\"14\" fontWeight=\"bold\" textAnchor=\"middle\">\r\n          Fase: {phase === 'feedforward' ? \"Forward\" : \"Backprop\"}\r\n        </text>\r\n      </svg>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div className=\"flex flex-col items-center max-w-4xl mx-auto p-4 bg-gray-50 rounded-lg shadow\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Animación de Perceptrón - Compuerta AND</h2>\r\n      \r\n      <div className=\"w-full bg-white rounded-lg shadow p-4 mb-4\">\r\n        <h3 className=\"font-bold mb-4 text-center\">Representación del Modelo</h3>\r\n        <div className=\"flex justify-center mb-4\">\r\n          {renderPerceptron()}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"w-full bg-white rounded-lg shadow p-4 mb-4\">\r\n        <h3 className=\"font-bold mb-2\">Estado del Entrenamiento</h3>\r\n        <div className=\"flex flex-col space-y-2\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-32\">Estado:</div>\r\n            <div className={`font-medium ${isConverged ? (isComplete ? 'text-green-600' : 'text-blue-600') : 'text-amber-600'}`}>\r\n              {isComplete \r\n                ? '✓ Entrenamiento completado' \r\n                : (isConverged \r\n                  ? '✓ Convergencia lograda - Ejecutando época adicional' \r\n                  : '⟳ Entrenando...')}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-32\">Error total:</div>\r\n            <div className=\"font-mono\">{totalError}</div>\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            <div className=\"w-32\">Época actual:</div>\r\n            <div className=\"font-mono\">{epoch}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex flex-wrap justify-center gap-4 w-full\">\r\n        <div className=\"bg-white rounded-lg shadow p-4 flex-1\">\r\n          <h3 className=\"font-bold mb-2\">Estado Actual</h3>\r\n          <div className=\"grid grid-cols-2 gap-2 mb-4\">\r\n            <div>Fase actual:</div>\r\n            <div className={`font-mono ${phase === 'feedforward' ? 'text-blue-500' : 'text-red-500'}`}>\r\n              {phase === 'feedforward' ? 'Forward-propagation' : 'Back-propagation'}\r\n            </div>\r\n            \r\n            <div>Época:</div>\r\n            <div className=\"font-mono\">{epoch}</div>\r\n            \r\n            <div>Pesos:</div>\r\n            <div className=\"font-mono\">[{weights.map(w => w.toFixed(3)).join(', ')}]</div>\r\n            \r\n            <div>Bias:</div>\r\n            <div className=\"font-mono\">{bias.toFixed(3)}</div>\r\n            \r\n            <div>Tasa de aprendizaje:</div>\r\n            <div className=\"font-mono\">{learningRate}</div>\r\n            \r\n            <div>Error total:</div>\r\n            <div className=\"font-mono\">{totalError}</div>\r\n            \r\n            <div>Muestra actual:</div>\r\n            <div className=\"font-mono\">[{trainingData[currentSample].inputs.join(', ')}] → {trainingData[currentSample].output}</div>\r\n            \r\n            <div>Salida del sumador:</div>\r\n            <div className=\"font-mono\">{weightedSum.toFixed(3)}</div>\r\n            \r\n            <div>Predicción:</div>\r\n            <div className={`font-mono ${\r\n              prediction === null \r\n                ? 'text-gray-500' \r\n                : (prediction === trainingData[currentSample].output \r\n                    ? 'text-green-500' \r\n                    : 'text-red-500')\r\n            }`}>\r\n              {prediction === null ? '...' : prediction}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-white rounded-lg shadow p-4 flex-1\">\r\n          <h3 className=\"font-bold mb-2\">Tabla de Verdad AND</h3>\r\n          <table className=\"w-full table-auto border-collapse mb-4\">\r\n            <thead>\r\n              <tr className=\"bg-gray-100\">\r\n                <th className=\"border p-1\">X₁</th>\r\n                <th className=\"border p-1\">X₂</th>\r\n                <th className=\"border p-1\">Esperado</th>\r\n                <th className=\"border p-1\">Predicción</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {trainingData.map((sample, idx) => (\r\n                <tr key={idx} className={idx === currentSample ? 'bg-yellow-100' : ''}>\r\n                  <td className=\"border p-1 text-center\">{sample.inputs[0]}</td>\r\n                  <td className=\"border p-1 text-center\">{sample.inputs[1]}</td>\r\n                  <td className=\"border p-1 text-center\">{sample.output}</td>\r\n                  <td className={`border p-1 text-center ${\r\n                    currentPredictions[idx] === null \r\n                      ? '' \r\n                      : currentPredictions[idx] === sample.output \r\n                        ? 'text-green-500 font-bold' \r\n                        : 'text-red-500 font-bold'\r\n                  }`}>\r\n                    {currentPredictions[idx] !== null ? currentPredictions[idx] : ''}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"w-full bg-white rounded-lg shadow p-4 mb-4\">\r\n        <h3 className=\"font-bold mb-2\">Registro de Actualización de Pesos</h3>\r\n        <div className=\"h-32 overflow-y-auto bg-gray-100 p-2 rounded text-xs font-mono\">\r\n          {logs.length === 0 ? (\r\n            <p>Inicie el entrenamiento para ver el registro...</p>\r\n          ) : (\r\n            logs.map((log, idx) => <p key={idx}>{log}</p>)\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex gap-2 mb-4\">\r\n        <button \r\n          onClick={() => setIsRunning(!isRunning)} \r\n          className={`px-4 py-2 rounded ${isComplete ? 'bg-gray-300' : (isRunning ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600')} text-white`}\r\n          disabled={isComplete}\r\n        >\r\n          {isRunning ? 'Pausar' : 'Auto'}\r\n        </button>\r\n        <button \r\n          onClick={trainStep} \r\n          className={`px-4 py-2 rounded ${phase === 'feedforward' ? 'bg-blue-500 hover:bg-blue-600' : 'bg-orange-500 hover:bg-orange-600'} text-white`}\r\n          disabled={isRunning || isComplete}\r\n        >\r\n          {phase === 'feedforward' ? 'Forward ▶' : 'Backprop ▶'}\r\n        </button>\r\n        <button \r\n          onClick={resetTraining} \r\n          className=\"px-4 py-2 rounded bg-blue-500 hover:bg-blue-600 text-white\"\r\n        >\r\n          Reiniciar\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"w-full bg-white rounded-lg shadow p-4\">\r\n        <h3 className=\"font-bold mb-2\">Controles</h3>\r\n        <div className=\"flex items-center gap-4 mb-2\">\r\n          <label>Tasa de aprendizaje:</label>\r\n          <input \r\n            type=\"range\" \r\n            min=\"0.01\" \r\n            max=\"1\" \r\n            step=\"0.01\" \r\n            value={learningRate} \r\n            onChange={e => setLearningRate(parseFloat(e.target.value))}\r\n            className=\"w-32\"\r\n          />\r\n          <span className=\"font-mono\">{learningRate.toFixed(2)}</span>\r\n        </div>\r\n        \r\n        <div className=\"mt-4\">\r\n          <h4 className=\"font-bold\">Leyenda:</h4>\r\n          <ul className=\"text-sm\">\r\n            <li className=\"flex items-center\"><span className=\"inline-block w-3 h-3 bg-green-500 rounded-full mr-1\"></span> Peso positivo</li>\r\n            <li className=\"flex items-center\"><span className=\"inline-block w-3 h-3 bg-red-500 rounded-full mr-1\"></span> Peso negativo</li>\r\n            <li className=\"flex items-center\"><span className=\"inline-block w-3 h-3 bg-yellow-500 rounded-full mr-1\"></span> Sumador</li>\r\n            <li className=\"flex items-center\"><span className=\"inline-block w-3 h-3 bg-green-200 rounded-full mr-1\"></span> Función de activación (escalón)</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerceptronNetworkAnimation;","import React from 'react';\r\nimport './App.css';\r\nimport PerceptronNetworkAnimation from './components/PerceptronNetworkAnimation';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PerceptronNetworkAnimation />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}